<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
	<channel>
		<title>Tyler Dakin - The Website</title>
		<description>Tyler Dakin&apos;s website</description>		
		<link>https://site.tylerdakin.com</link>
		<atom:link href="https://site.tylerdakin.com/feed.xml" rel="self" type="application/rss+xml" />
		
			<item>
				<title>Building a &quot;Message of the Day&quot; Component for Your App</title>
				<description>&lt;p&gt;&lt;img style=&quot;width: 100%; height: auto;&quot; src=&quot;/assets/blog/motd-minecraftSplash.png&quot; alt=&quot;An example of Minecraft&apos;s splash text.&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;if-youve-played-minecraft-you-might-remember-the-splash-text-on-the-main-menu-that-shows-a-random-bit-of-text-every-time-you-get-to-that-screen-lets-try-creating-something-similar-using-json-that-we-can-implement-in-our-app-to-say-hello-to-our-users&quot;&gt;If you‚Äôve played Minecraft, you might remember the splash text on the Main Menu that shows a random bit of text every time you get to that screen. Let‚Äôs try creating something similar using JSON that we can implement in our app to say hello to our users!&lt;/h3&gt;

&lt;h2 id=&quot;contents&quot;&gt;Contents&lt;/h2&gt;
&lt;h3 id=&quot;what-were-building&quot;&gt;&lt;a href=&quot;#building&quot;&gt;What We‚Äôre Building&lt;/a&gt;&lt;/h3&gt;
&lt;h3 id=&quot;my-previous-method&quot;&gt;&lt;a href=&quot;#old&quot;&gt;My Previous Method&lt;/a&gt;&lt;/h3&gt;
&lt;h3 id=&quot;the-new-method&quot;&gt;&lt;a href=&quot;#new&quot;&gt;The New Method&lt;/a&gt;&lt;/h3&gt;
&lt;h3 id=&quot;removing-the-json&quot;&gt;&lt;a href=&quot;#text&quot;&gt;Removing the JSON&lt;/a&gt;&lt;/h3&gt;
&lt;h3 id=&quot;adding-randomness&quot;&gt;&lt;a href=&quot;#random&quot;&gt;Adding Randomness&lt;/a&gt;&lt;/h3&gt;
&lt;h3 id=&quot;wrap-up-and-repo&quot;&gt;&lt;a href=&quot;#wrap&quot;&gt;Wrap Up and Repo&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;I‚Äôve already created something similar in my app, &lt;a href=&quot;https://getentropy.tylerdakin.com&quot;&gt;Entropy&lt;/a&gt;, but the way I do it is far from convenient. I wanted to write about that method when I used it originally but now that I‚Äôm updating that method, I‚Äôd like to run through how I did it then, how I‚Äôm going to do it today, and why today‚Äôs method is a lot better. First, let‚Äôs review what exactly this feature will do.&lt;/p&gt;

&lt;h2 id=&quot;-message-of-the-day-&quot;&gt;&lt;a style=&quot;text-decoration: none;&quot; href=&quot;&quot; name=&quot;building&quot;&gt; Message of the Day &lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The end goal for this will be to have a place in our app where a user can see a piece of text that the developer updates without updating the app. (As I‚Äôm typing this I realize that may sound sketchy, but I‚Äôm sure you can think about other instances where apps make minor updates without going through the App Store. For example, Twitter rolling out their Fleets feature to certain accounts could be considered an example of this. It‚Äôs a feature that‚Äôs in the app that can be altered (disabled) without an update to the app.) This piece of text can be a message for the user like wishing them ‚ÄúHappy Holidays!‚Äù. This is the example we‚Äôll use. I‚Äôll also give a proposal for how you can randomize what text is being shown to each person, but, before we get into that, let‚Äôs go over what my current method is and why it needs an update!&lt;/p&gt;

&lt;p&gt;I‚Äôll be doing this with an iOS app and Swift because I think it‚Äôs particularly useful in that medium and it‚Äôs where I‚Äôve done this before. There are many mediums in which you could deploy this feature as long as you have the ability to parse JSON or get text stored at a web address.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/blog/motd-entropy.jpg&quot; alt=&quot;How Entropy looks with splash text. The splash text is the second line only with the first line present even without any splash text provided.&quot; style=&quot;width: 100%; height: auto;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;-the-inconvenient-method-&quot;&gt;&lt;a style=&quot;text-decoration: none;&quot; href=&quot;&quot; name=&quot;old&quot;&gt; The Inconvenient Method &lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;When I originally began preparing Entropy for its beta period and release, I did not know how to write HTML, CSS, or JS (my JS is still questionable!). In addition, for any prior websites I wanted to make for myself I had used Weebly, a drag and drop website builder that offered free websites if you used their domain. Entropy‚Äôs website is still being hosted by them at &lt;a href=&quot;https://entropy.tylerdakin.com&quot;&gt;entropyapp.weebly.com&lt;/a&gt; (although I now wrap that link with my own domain whenever I mention it üòâ).&lt;/p&gt;

&lt;p&gt;So, with this being the case I could not use my own website to host just a simple JSON file. I wasn‚Äôt even as familiar with JSON and parsing it in iOS as I am today, but at the very least I think I remember thinking that this would be a better option if possible. With these circumstances, I decided my best option for creating a remotely updated splash text was to use Weebly. The problem with this method is that Weebly does not allow a super basic file hosting. Updating it is a bit tough because you have to go through their uploader and it‚Äôs a bit of a mess. Instead, I went with creating a private page that just has a bit of text on it in addition to the navigation. Then, on the app‚Äôs side, we use SwiftSoup to scrape that text from the website. Another problem here was that Weebly doesn‚Äôt allow customizing the HTML so I had to use Inspect Element to find the class that I‚Äôd have to scrape. Here‚Äôs what the old method essentially boiled down to in code:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;func retrieveMOTD() {
    let url = URL(string: &quot;https://entropyapp.weebly.com/motd&quot;)!
    let task = URLSession.shared.dataTask(with: url) { (data,response,error) in
        if error != nil {
            print(&quot;ERROR: \(error!)&quot;)
            motd = &quot;&quot;
        }
        else {
            do {
                let htmlContent = NSString(data: data!, encoding: String.Encoding.utf8.rawValue)
                let doc: Document = try SwiftSoup.parse(htmlContent! as String)
                
                //This gets the motd
                var text = try doc.select(&quot;div.paragraph&quot;).text()
            
                motd = &quot;\(text)&quot;
            }
            catch {
                print(&quot;There was an error.&quot;)
            }
        }
    }
    task.resume()
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I‚Äôve left out some formatting, but that‚Äôs the gist of it. The problem with this is that it relies on Weebly‚Äôs Paragraph blocks having the class ‚Äúdiv.paragraph‚Äù. If they ever change that, my app will just catch the error and not deliver the message. Luckily, these aren‚Äôt very high stakes. However, this method still isn‚Äôt convenient because it‚Äôs a pain in the arse to log in to my Weebly account, just to write a few lines of text, and then have to remember when to change it back (especially if it‚Äôs holiday related; Entropy was celebrating Halloween for most of November 2019 thanks to this method and my poor memory!). So, with that, let‚Äôs get into making this a lot simpler for myself!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/blog/motd-weebly.png&quot; alt=&quot;A photo of where I update Entropy&apos;s splash text.&quot; style=&quot;width: 100%; height: auto;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Fun Fact:&lt;/strong&gt; While editing this I found a bug in Entropy where if there is nothing written in the Weebly paragraph block and Entropy tries to grab the splash text (which it does often), the app crashes! Good thing I‚Äôm about to completely change the method instead of fixing that one bug. üòÑ&lt;/p&gt;

&lt;h2 id=&quot;-the-new-method-&quot;&gt;&lt;a style=&quot;text-decoration: none;&quot; href=&quot;&quot; name=&quot;new&quot;&gt; The New Method &lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;With the creation of my new personal website (the one you‚Äôre on right now), hosting a file is as simple as ever for me! This means getting a JSON file that can relay our splash text to our app should be really simple! For the sake of simplicity, I‚Äôm actually going to do the work for this article outside of Entropy, in a blank state. The focus of this will be on preparing the file, getting it hosted, and creating the Swift function that will retrieve and parse our data. The UI is up to you!&lt;/p&gt;

&lt;h3 id=&quot;step-1-preparing-the-file&quot;&gt;STEP 1: PREPARING THE FILE&lt;/h3&gt;
&lt;p&gt;If you haven‚Äôt worked with JSON before, this might seem a bit foreign but it is far from complicated! Once you see a small bit of JSON, you don‚Äôt have far to go before you‚Äôre used to it. In this case, the JSON is really easy to follow! Just one actual line in between some braces! There are lots of great guides on how to use and format JSON but this is not one of them! I will give this piece of advice, though: I‚Äôm using &lt;a href=&quot;https://twitter.com/simonbs&quot;&gt;Simon St√∏vring‚Äôs&lt;/a&gt; app &lt;a href=&quot;https://jayson.app&quot;&gt;Jayson&lt;/a&gt; to put my JSON file together. It‚Äôs actually the first time I‚Äôve used it, since it wasn‚Äôt launching properly during the macOS Big Sur beta, but it‚Äôs really quite excellent to use! Very easy and exactly what I‚Äôd want out of a JSON editor based on what I‚Äôve seen so far, though I haven‚Äôt spent too much time with it.&lt;/p&gt;

&lt;p&gt;Also, if you don‚Äôt have a particular use for this just yet, free to use this link to grab the JSON file from, it‚Äôs just the one I‚Äôll be using for Entropy‚Äôs source. I wouldn‚Äôt recommend using it elsewhere, otherwise the messages might be out of context!&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://site.tylerdakin.com/motd.json&quot;&gt;SOURCE: https://site.tylerdakin.com/motd.json&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Create a new file, I‚Äôll call it ‚Äúmotd.json‚Äù for ‚ÄúMessage of the Day‚Äù. Then, we need to actually get the JSON in there, so let‚Äôs start with this blank template:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;{
    &quot;motd&quot;: 
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And just throw your message in right after that key:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;{
    &quot;motd&quot;: &quot;üéÅ Happy Holidays! ‚òÉÔ∏è&quot;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And fun fact, that‚Äôs all we need! Our JSON file is done and we can upload it to our host. I‚Äôm using GitHub Pages for my website‚Äôs host. All you need is somewhere to put the file that will display it in raw text when you go to https://YOURHOST/motd.json. If you want a free website option, I‚Äôd recommend going through GitHub Pages, it‚Äôs worked great for me. (FYI it looks like GitLab Pages is a thing too! I plan on switching over to them at some point but have not yet.)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; You may be wondering why I‚Äôm using JSON for this. After all, writing plain text and grabbing that on the iOS side is probably easier. Well, later on in this article I‚Äôll write about how to do this with just a text file but the JSON file lets us add as many properties as we want and makes it easy to parse in the app. In addition to ‚Äúmotd‚Äù we could have ‚ÄúhiddenPromoCode‚Äù as a property to display a promo code at the very end of a table view, for example, but only on certain days (when there‚Äôs a promo code available). I‚Äôm sure those reading this can come up with loads more ideas for how this could be used but for now I‚Äôm going to stick to a message of the day.&lt;/p&gt;

&lt;h3 id=&quot;step-2-getting-our-message-into-the-app&quot;&gt;STEP 2: GETTING OUR MESSAGE INTO THE APP&lt;/h3&gt;
&lt;p&gt;Alright, onto the fun part! The best way to get ready for this step is to make sure you have some sort of UILabel equivalent that you can update in your app!&lt;/p&gt;

&lt;p&gt;Once you have that label ready, create a variable called ‚Äúmotd‚Äù and make sure it‚Äôs in the same scope as your label property.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;var motd: String = &quot;&quot; {

}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In those braces, I‚Äôm going to put the didSet Property Observer. What this will do is copy the text stored at motd to the label.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;var motd: String = &quot;&quot; {
    didSet {
        myLabel.text = motd
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Great! Now, whenever we update that motd variable, our label will update with it. Let‚Äôs get on with retrieving the data.&lt;/p&gt;

&lt;p&gt;Get a new Swift file going, I‚Äôll call mine ‚ÄúRetrieveMOTD.swift‚Äù. Here, we‚Äôre going to create the function that will grab the message and assign it to our motd variable. However, our motd variable is in another file, and probably in another class. To get around this, I‚Äôm going to put my function in the same class as that variable using Swift‚Äôs &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;extension&lt;/code&gt; keyword. Your RetrieveMOTD.swift file should look something like this, now:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;extension YourClass {
    func retrieveMOTD() {
        motd = &quot;It worked!&quot;
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I‚Äôd recommend testing that code now by running the function in your viewDidLoad(). Just make sure the label is getting updated properly before we move on.&lt;/p&gt;

&lt;p&gt;Next, let‚Äôs prepare our data model for the JSON data that we retrieve. This is really easy if you‚Äôve kept it to just the ‚Äúmotd‚Äù property in your JSON. Reason being: we need to have a property in our struct for each of the properties in our JSON file and the struct also needs to conform to Codable so we can decode our JSON data into that struct. Put this outside of the extension code:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;struct Response: Codable {
    let motd: String
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Going back to the retrieveMOTD method, let‚Äôs get our URL and URLRequest ready. The URL is going to be wrapped in a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;guard let&lt;/code&gt; so we can handle an error if one comes up. I‚Äôll also add the URLSession Task. Make sure to add ‚Äú&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.resume()&lt;/code&gt;‚Äù after the curly braces!&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;extension YourClass {
    func retrieveMOTD() {
        // Put your link in for the string, instead of my link!
        guard let url = URL(string: &quot;https://site.tylerdakin.com/motd.json&quot;) else {
            // Visual feedback if something goes wrong
            print(&quot;URL not valid&quot;)
            return
        }
        
        let request = URLRequest(url: url)
        
        URLSession.shared.dataTask(with: request) { [weak self] data, response, error in

        }.resume()
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now we have to handle the data we get back from the URLSession. If we get proper data back, great! If not, we‚Äôll print the error to console.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// Within the URLSession in retrieveMOTD
guard let data = data else {
    print(&quot;No data found.\nERROR: \(error?.localizedDescription ?? &quot;Unknown Error&quot;)&quot;)
    return
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Lastly, we have to decode the JSON data into our Response struct that we made earlier. If we‚Äôre able to decode it properly, we‚Äôll show that to the user by assigning our struct‚Äôs motd value to our ViewController‚Äôs motd value and letting the Property Observer do the rest. Otherwise, we‚Äôll print to console that we couldn‚Äôt decode the data. Just make sure you put the update to motd in an async function. We need to update the UI from the main thread only so our app will crash if we don‚Äôt.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// Within the URLSession in retrieveMOTD
if let response = try? JSONDecoder().decode(Response.self, from: data) {
    // Program crashes without this because we need to update the UI from the main thread.
    DispatchQueue.main.async { [weak self] in
        self?.motd = response.motd
    }
}
else {
    print(&quot;ERROR: Could not decode JSON data.&quot;)
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;With that, your RetrieveMOTD.swift should look something like this:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;struct Response: Codable {
    let motd: String
}

extension ViewController {
    func retrieveMOTD() {
        // Put your link in for the string, instead of my link!
        guard let url = URL(string: &quot;https://site.tylerdakin.com/motd.json&quot;) else {
            // Visual feedback if something goes wrong
            motd = &quot;URL not valid&quot;
            return
        }
        
        let request = URLRequest(url: url)
        
        URLSession.shared.dataTask(with: request) { [weak self] data, response, error in
            guard let data = data else {
                self?.motd = &quot;No data found.\nERROR: \(error?.localizedDescription ?? &quot;Unknown Error&quot;)&quot;
                return
            }
            
            // Within the URLSession in retrieveMOTD
            if let response = try? JSONDecoder().decode(Response.self, from: data) {
                // Program crashes without this because we need to update the UI from the main thread.
                DispatchQueue.main.async { [weak self] in
                    self?.motd = response.motd
                }
            }
            else {
                print(&quot;ERROR: Could not decode JSON data.&quot;)
            }
        }.resume()
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Mind you, I‚Äôll have the full repo with all of these methods linked below as well. We should be set to run it now. Double-check that a call to retrieveMOTD() is in the viewDidLoad() or that it can be triggered some other way and try it out. You should see that when you call retrieveMOTD(), the text changes to whatever message you put in your JSON!
&lt;img src=&quot;/assets/blog/motd-firstdemo.png&quot; alt=&quot;The app now displays our &apos;Happy Holidays&apos; message!&quot; style=&quot;width: 100%; height: auto;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;-removing-the-json-&quot;&gt;&lt;a style=&quot;text-decoration: none;&quot; href=&quot;&quot; name=&quot;text&quot;&gt; Removing the JSON &lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Okay, this is a great system and it has room for expansion. I‚Äôd argue that the expansion potential makes it the best solution. However, what if you really, really, don‚Äôt plan to expand this feature? Let‚Äôs try accomplishing this with just a text file. We‚Äôre going to use the same message but this time we‚Äôre going to upload to ‚Äúhttps://YOURHOST/motd.txt‚Äù and we‚Äôll have to change our Swift code to make it compatible. The benefits of this method are that it‚Äôs easier to change the message, because it‚Äôs just plain text, there‚Äôs no formatting, and the Swift code might end up being smaller. Let‚Äôs get into it.&lt;/p&gt;

&lt;h3 id=&quot;step-1-preparing-the-file-1&quot;&gt;STEP 1: PREPARING THE FILE&lt;/h3&gt;
&lt;p&gt;This should be easy because there‚Äôs no formatting involved. Create a new plain text file, add a message, and upload it to your host. Make note of the URL that it gets uploaded to, because we‚Äôll need that later. For this demo, I‚Äôve uploaded the message ‚ÄúüéÅ Happy Holidays from a text file! ‚òÉÔ∏è‚Äù to the following URL. Feel free to use it as a placeholder while you test:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://site.tylerdakin.com/motd.txt&quot;&gt;SOURCE: https://site.tylerdakin.com/motd.txt&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;step-2-reworking-our-swift-method&quot;&gt;STEP 2: REWORKING OUR SWIFT METHOD&lt;/h3&gt;
&lt;p&gt;Everything in our ViewController should be okay. We‚Äôll just change that motd variable when we have our text ready to go.&lt;/p&gt;

&lt;p&gt;In the RetrieveMOTD file, within the extension to your class (ViewController), add another function called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;retrieveMOTDasText&lt;/code&gt;. This function is going to be a lot simpler than the previous one. We still need to verify the url, so that part can be copied from the previous method (other than the URL itself, of course).&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;func retrieveMOTDasText() {
    // Put your link in for the string, instead of my link! Make sure it&apos;s the txt link!
    guard let url = URL(string: &quot;https://site.tylerdakin.com/motd.txt&quot;) else {
        // Visual feedback if something goes wrong
        motd = &quot;URL not valid&quot;
        return
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now for some new code. We‚Äôre going to use String‚Äôs contentsOf: url initializer to get our data. This might not work if the url doesn‚Äôt store anything, though, so we need to wrap that call in a do catch block and begin the call with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;try&lt;/code&gt;. If we get the String back properly, we‚Äôll send that to our motd variable. Otherwise, we‚Äôll update the motd variable with an error message (printing to the console is acceptable here too; I‚Äôve included both).&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;do {
    let message = try String(contentsOf: url)
    motd = message
}
catch {
    motd = &quot;No message received.&quot;
    print(&quot;There was an error retrieving the message.&quot;)
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And now our work is done! Again, this probably feels easier, and I‚Äôd say it is, but the JSON method allows for easy expansion later on and JSON is the standard format for other APIs that you‚Äôll use. It‚Äôs definitely good to know. With that, though, let‚Äôs launch the app. You should see your message on screen once it‚Äôs been loaded.
&lt;img src=&quot;/assets/blog/motd-textdemo.png&quot; alt=&quot;The app now displays our &apos;Happy Holidays from a text file&apos; message!&quot; style=&quot;width: 100%; height: auto;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;-adding-randomness-&quot;&gt;&lt;a style=&quot;text-decoration: none;&quot; href=&quot;&quot; name=&quot;random&quot;&gt; Adding Randomness &lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Now, this system is really cool and should be easy to update. However, it‚Äôs not quite the same as the Minecraft example I showed earlier. What if we don‚Äôt want to update it often? What if, instead, we want the app to keep those messages fresh by showing a random one each time? This is the last part I‚Äôd like to show and the text format I just showed you is probably a great format to implement this feature with. Instead of just one line that we show to the user every time, we‚Äôll write a bunch of phrases, one line for each, that we can then pick randomly from on the app. Every time the user loads the app, a new phrase will be shown.&lt;/p&gt;

&lt;p&gt;We‚Äôre going to get into implementing that soon, but, first, I‚Äôd like to recommend that, if you‚Äôre following along with each chapter of this, you make a couple buttons on your app that will call each of the functions we‚Äôve made. That way, you can make sure each of them are working independently, which they should be if you really have followed along.&lt;/p&gt;

&lt;h3 id=&quot;step-1-preparing-the-file-2&quot;&gt;STEP 1: PREPARING THE FILE&lt;/h3&gt;
&lt;p&gt;Okay, let‚Äôs get into implementing this new feature. Start by creating a text file, I‚Äôll call mine splash.txt. Add at least 5 phrases to it or copy the ones I‚Äôve left for you below. Then, save and upload it.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;plaintext&quot;&gt;Happy Holidays!
Season&apos;s Greetings!
It&apos;s the most wonderful time of the year!
‚ùÑÔ∏è ‚òÉÔ∏è ‚õ∑ üå®
2020 is nearly over!
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Again, I‚Äôve uploaded this text to the URL below so you don‚Äôt have to find a host for your text file if you‚Äôre just practicing:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://site.tylerdakin.com/splash.txt&quot;&gt;SOURCE: https://site.tylerdakin.com/splash.txt&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;step-2-getting-a-random-line-from-our-string&quot;&gt;STEP 2: GETTING A RANDOM LINE FROM OUR STRING&lt;/h3&gt;
&lt;p&gt;Let‚Äôs make a new function in our extension for the ViewController called getSplashText.&lt;/p&gt;

&lt;p&gt;We already know how to grab the text from our URL, so now we just have to grab a random line from the text we get back. To make this simpler, I‚Äôm going to copy the retrieveMOTDasText method and change it to return the String it finds at the URL. I‚Äôll also add a urlString parameter so we can change the URL as needed. Once this is done, we can just call that new method instead of copying all of the code from retrieveMOTDasText into getSplashText. Here‚Äôs what the altered method looks like:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;func retrieveTextFromURL(_ urlString: String) -&amp;gt; String {
    // No link needed here because it&apos;s provided by the caller!
    guard let url = URL(string: urlString) else {
        // Visual feedback if something goes wrong
        return &quot;URL not valid&quot;
    }
    
    do {
        let message = try String(contentsOf: url)
        // We return the message to the caller instead of changing the motd variable.
        return message
    }
    catch {
        print(&quot;There was an error retrieving the message.&quot;)
        return &quot;No text received.&quot;
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You might notice that retrieveTextFromURL doesn‚Äôt rely on anything in our ViewController which means you don‚Äôt actually have to have it in the extension. Moving it outside allows you to call it from anywhere and you could even use it as a quick solution for future projects. I‚Äôd recommend selecting the whole function, secondary-clicking, and then choosing ‚ÄúCreate Code Snippet‚Äù in Xcode to save that function for future use.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/blog/motd-snippet.png&quot; alt=&quot;retrieveTextFromURL being added to the Xcode Snippets Library.&quot; style=&quot;width: 100%; height: auto;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Okay, now that we‚Äôve created that function, getting our text should be simple! Just call retrieveTextFromURL within getSplashText and make sure you have the URL as a String in the parameters. For now, print the result to make sure we get what we‚Äôre expecting. Run the code, but make sure you‚Äôve added a way to run getSplashText, whether that be changing viewDidLoad or adding a button to call it:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;func getSplashText() {
    // Replace my link with your splash text link!
    let allMessages = retrieveTextFromURL(&quot;https://site.tylerdakin.com/splash.txt&quot;)
    print(allMessages)
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;As long as you see every message you added to that text file in your console, you should be all set! Now, let‚Äôs actually pick out a message and assign it to our motd variable! To do this, we‚Äôll separate the String by any newline characters (‚Äò\n‚Äô) using the .split method and then pick a random element out of the resulting array with the .randomElement method. Whichever element is picked will be what we assign to the motd variable.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;func getSplashText() {
    // Replace my link with your splash text link!
    let allMessages = retrieveTextFromURL(&quot;https://site.tylerdakin.com/splash.txt&quot;)
    // The split method gives us each line as its own Substring.
    let eachLine = allMessages.split(separator: &quot;\n&quot;)
    // Grab a random item from the array, convert to String, and assign to motd.
    motd = String(eachLine.randomElement() ?? &quot;No message was found.&quot;)
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And that should be it! Run your code, if the previous test worked fine, this should work as well. Trigger the getSplashText method a few times to make sure it‚Äôs not picking the same one every time! 
&lt;img src=&quot;/assets/blog/motd-randomdemo.png&quot; alt=&quot;One of the random phrases has been chosen properly!&quot; style=&quot;width: 100%; height: auto;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;-wrap-up-&quot;&gt;&lt;a style=&quot;text-decoration: none;&quot; href=&quot;&quot; name=&quot;wrap&quot;&gt; Wrap Up &lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;This was more than I was expecting to write for my first post but I enjoyed it! Please let me know what you thought, if it was too long, if I should go further or less into detail, or any other criticisms you might have for me! I‚Äôm always reachable on &lt;a href=&quot;https://twitter.tylerdakin.com&quot;&gt;Twitter (@_tylerdakin)&lt;/a&gt; or by email at &lt;a href=&quot;mailto:dakint@icloud.com&quot;&gt;dakint@icloud.com&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;My finished project is uploaded to the following GitHub repo so if you want to take a closer look, feel free! The markdown file powering this blog post will be posted as the README there if you need to reference it for any explanations!&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/tylerdak/Blog-MOTD&quot;&gt;Click here to check out the associated repo for this post.&lt;/a&gt;&lt;/p&gt;
</description>
				<pubDate>Sun, 22 Nov 2020 00:00:00 -0500</pubDate>
				<link>https://site.tylerdakin.com/2020/11/22/motd.html</link>
				<guid isPermaLink="true">https://site.tylerdakin.com/2020/11/22/motd.html</guid>
			</item>
		
			<item>
				<title>Welcome</title>
				<description>&lt;h2 id=&quot;hello&quot;&gt;Hello!&lt;/h2&gt;
&lt;p&gt;This is my blog.&lt;/p&gt;

&lt;p&gt;I‚Äôm not too sure what I‚Äôm going to be using this for just yet, but the topics will likely range from writeups about programs I create to rants about what‚Äôs got me frustrated recently. Expect quite a variety!&lt;/p&gt;

&lt;p&gt;I already have a couple of ideas for posts including sharing my experience developing &lt;a href=&quot;https://getentropy.tylerdakin.com&quot;&gt;Entropy&lt;/a&gt; and I‚Äôd love to build a habit of sharing my experiences as I create them. I think that‚Äôs a great way to really delve deep into what you‚Äôre learning.&lt;/p&gt;

&lt;p&gt;I‚Äôm creating blog posts with Markdown so it‚Äôs really easy to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;show you my code inline with the posts&lt;/code&gt;! If you‚Äôre reading this, I should have an RSS feed up and running and it is hopefully linked at the bottom of the page. Feel free to add that to your RSS reader!&lt;/p&gt;
</description>
				<pubDate>Tue, 20 Oct 2020 00:00:00 -0400</pubDate>
				<link>https://site.tylerdakin.com/2020/10/20/welcome.html</link>
				<guid isPermaLink="true">https://site.tylerdakin.com/2020/10/20/welcome.html</guid>
			</item>
		
	</channel>
</rss>